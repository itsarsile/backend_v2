generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  name             String        @db.VarChar(255)
  email            String        @unique
  photo            String?       @default("default.png")
  verified         Boolean?      @default(false)
  password         String
  role             RoleEnumType? @default(customer)
  verificationCode String?       @unique @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  orders           Order[]
  addresses        Address[]
  products         Product[]

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map(name: "users")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  image       String?
  rating      Float?      @default(0.0)
  price       Int
  stock       Int
  category    Category[]
  orderItems  OrderItem[]
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?

  @@map(name: "products")
}

model Order {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  address    Address?    @relation(fields: [addressId], references: [id])
  addressId  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus
  orderItems OrderItem[] // New field for order items
  totalPrice Float

  @@map(name: "orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int

  @@map(name: "order_items")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String
  products Product[]
}

model Address {
  id         String  @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  orders     Order[]
  user       User?   @relation(fields: [userId], references: [id])
  userId     String?
  @@map(name: "addresses")
}

enum RoleEnumType {
  customer
  seller
  admin
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  canceled
}
